{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Kopia River Arno XGBoost model  univariate forecasting 2004-2016","provenance":[],"collapsed_sections":[],"mount_file_id":"1pqpVi9oREkyp45hoMRFukS-UGKG4yvvD","authorship_tag":"ABX9TyMp9G6TWCZbkrFJtbjP9IS5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["XGBRegressor - Extreme Gradient Boosting\n","\n","n_estimatiors - number of gradient boosted trees\n","\n","\n"],"metadata":{"id":"AheXbGfvEDRB"}},{"cell_type":"code","source":["import pandas as pd\n","import plotly.express as px\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import matplotlib as mpl\n","import xgboost\n","import plotly.express as px\n","import plotly.figure_factory as ff\n","import plotly.graph_objs as go\n","\n","from sklearn.model_selection import TimeSeriesSplit\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.metrics import r2_score\n","from sklearn.preprocessing import StandardScaler\n","from math import sqrt\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import cross_val_score, KFold"],"metadata":{"id":"KiA6ZlhBzMAc","executionInfo":{"status":"ok","timestamp":1660819173142,"user_tz":-120,"elapsed":3834,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","execution_count":2,"metadata":{"id":"yF6MGOE_xn1P","executionInfo":{"status":"error","timestamp":1660819174010,"user_tz":-120,"elapsed":873,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}},"outputId":"a607d4bb-8d2b-49cf-ff67-84cfe20ff47d","colab":{"base_uri":"https://localhost:8080/","height":396}},"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-4ebcf19ff661>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mdata_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/drive/MyDrive/PK Data Science/master/codes/water_availability_prediction_in_Italy/data/\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mriver_arno_csv_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"River_Arno.csv\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_path\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mriver_arno_csv_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    584\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    585\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 586\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    587\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    480\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 482\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    483\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    809\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    810\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 811\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    812\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    813\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1038\u001b[0m             )\n\u001b[1;32m   1039\u001b[0m         \u001b[0;31m# error: Too many arguments for \"ParserBase\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1040\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmapping\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_failover_to_python\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/c_parser_wrapper.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0;31m# open handles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open_handles\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/base_parser.py\u001b[0m in \u001b[0;36m_open_handles\u001b[0;34m(self, src, kwds)\u001b[0m\n\u001b[1;32m    227\u001b[0m             \u001b[0mmemory_map\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"memory_map\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    228\u001b[0m             \u001b[0mstorage_options\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"storage_options\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 229\u001b[0;31m             \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"encoding_errors\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"strict\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    230\u001b[0m         )\n\u001b[1;32m    231\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    705\u001b[0m                 \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    706\u001b[0m                 \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 707\u001b[0;31m                 \u001b[0mnewline\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    708\u001b[0m             )\n\u001b[1;32m    709\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/drive/MyDrive/PK Data Science/master/codes/water_availability_prediction_in_Italy/data/River_Arno.csv'"]}],"source":["data_path = \"/content/drive/MyDrive/PK Data Science/master/codes/water_availability_prediction_in_Italy/data/\"\n","river_arno_csv_name = \"River_Arno.csv\"\n","df = pd.read_csv(data_path+river_arno_csv_name)"]},{"cell_type":"code","source":["df.index = pd.to_datetime(df.Date)"],"metadata":{"id":"HN1JJRvGzfJE","executionInfo":{"status":"aborted","timestamp":1660819174011,"user_tz":-120,"elapsed":19,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_date_range = pd.date_range(start='1998-01-01', end='2020-12-06')\n","list_of_missing_dates = df_date_range.difference(df.index)\n","df_missing = pd.DataFrame(index=list_of_missing_dates, columns=df.columns)\n","df_with_missing = pd.concat([df, df_missing])\n","df_with_missing.drop('Date', axis=1, inplace=True)\n","df_with_missing.sort_index(inplace=True)\n","df_with_missing.isnull().sum()"],"metadata":{"id":"Noij09qhzoUZ","executionInfo":{"status":"aborted","timestamp":1660819174012,"user_tz":-120,"elapsed":19,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def drop_columns_missing_values_number_is_equal(df, missing_values_number):\n","  missing = df.isnull().sum()\n","  columns_to_drop = []\n","  for i,v in missing.items():\n","    if v > missing_values_number:\n","      columns_to_drop.append(i)\n","  return df.drop(columns_to_drop, axis=1)"],"metadata":{"id":"56hME1NpdUcL","executionInfo":{"status":"aborted","timestamp":1660819174013,"user_tz":-120,"elapsed":19,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_with_missing = drop_columns_missing_values_number_is_equal(df_with_missing,3000)\n","df_with_missing.isnull().sum()"],"metadata":{"id":"z-pyl8-6dXsV","executionInfo":{"status":"aborted","timestamp":1660819174013,"user_tz":-120,"elapsed":18,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_filtered = df_with_missing[(df_with_missing.index < \"2017-01-01\") & (df_with_missing.index > \"2003-12-31\")]\n","df_filtered.isnull().sum()"],"metadata":{"id":"nPwNMaKZdddX","executionInfo":{"status":"aborted","timestamp":1660819174014,"user_tz":-120,"elapsed":18,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def seasonal_mean(ts, n, lr=0.7):\n","    \"\"\"\n","    Compute the mean of corresponding seasonal periods\n","    ts: 1D array-like of the time series\n","    n: Seasonal window length of the time series\n","    \"\"\"\n","    out = np.copy(ts)\n","    for i, val in enumerate(ts):\n","        if np.isnan(val):\n","            ts_seas = ts[i-1::-n]  # previous seasons only\n","            if np.isnan(np.nanmean(ts_seas)):\n","                ts_seas = np.concatenate([ts[i-1::-n], ts[i::n]])  # previous and forward\n","            out[i] = np.nanmean(ts_seas) * lr\n","    return out"],"metadata":{"id":"oyvLp_Zez8Y4","executionInfo":{"status":"aborted","timestamp":1660819174015,"user_tz":-120,"elapsed":18,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_filtered['Hydrometry_Nave_di_Rosano'] = seasonal_mean(df_filtered['Hydrometry_Nave_di_Rosano'], n=12, lr=1.25)\n","df_filtered['Temperature_Firenze'] = seasonal_mean(df_filtered['Temperature_Firenze'], n=12, lr=1.25)"],"metadata":{"id":"xqiXf1opdgw2","executionInfo":{"status":"aborted","timestamp":1660819174015,"user_tz":-120,"elapsed":18,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_filtered.sort_index(inplace=True)\n"],"metadata":{"id":"_51wqzxEdmEz","executionInfo":{"status":"aborted","timestamp":1660819174016,"user_tz":-120,"elapsed":18,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["target_column = 'Hydrometry_Nave_di_Rosano'\n","features = list(df_filtered.columns.difference([target_column]))\n","\n","forecast_lead = 1\n","target = f\"{target_column}_lead{forecast_lead}\"\n","\n","df_filtered[target] = df_filtered[target_column].shift(-forecast_lead)\n","df_filtered = df_filtered[:-forecast_lead]\n","\n"],"metadata":{"id":"pmSSvr3Ud7JL","executionInfo":{"status":"aborted","timestamp":1660819174016,"user_tz":-120,"elapsed":18,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_start = '2014-01-01'\n","\n","df_train = df_filtered[:test_start].copy()\n","df_test = df_filtered[test_start:].copy()\n","\n","print(\"Test set fraction:\", len(df_test) / len(df_filtered))"],"metadata":{"id":"ykU37k4beyL3","executionInfo":{"status":"aborted","timestamp":1660819174017,"user_tz":-120,"elapsed":19,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["target_mean = df_train[target].mean()\n","target_stdev = df_train[target].std()\n","\n","for c in df_train.columns:\n","    mean = df_train[c].mean()\n","    stdev = df_train[c].std()\n","\n","    df_train[c] = (df_train[c] - mean) / stdev\n","    df_test[c] = (df_test[c] - mean) / stdev"],"metadata":{"id":"vPsXlWoxe9d7","executionInfo":{"status":"aborted","timestamp":1660819174018,"user_tz":-120,"elapsed":19,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train = df_train[features].values\n","y_train = df_train[target].values\n","\n","\n","X_test = df_test[features].values\n","y_test = df_test[target].values"],"metadata":{"id":"0CJNzMrKfAaZ","executionInfo":{"status":"aborted","timestamp":1660819174018,"user_tz":-120,"elapsed":19,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["reg = xgboost.XGBRegressor(objective='reg:squarederror', n_estimators=1000)\n","\n","reg.fit(X_train, y_train)\n","\n","predictions_xgb = reg.predict(X_test)\n","\n","mse_xgb = mean_squared_error(y_test, predictions_xgb)\n","rmse_xgb = sqrt(mse_xgb)\n","mae_xgb = mean_absolute_error(y_test, predictions_xgb)\n","\n","print(\"XGBoost - Root Mean Square Error (RMSE): %.3f\" % rmse_xgb)\n","print(\"XGBoost - Mean Square Error (MSE): %.3f\" % mse_xgb)\n","print(\"XGBoost - Mean Absolute Error (MAE): %.3f\" % mae_xgb)\n","print(\"XGBoost - Mean: %.3f\" % np.mean(y_test))\n","\n","plt.figure(figsize=(16,5), dpi=150)\n","plt.plot(y_test)\n","plt.plot(predictions_xgb, color='orange')\n","plt.show()"],"metadata":{"id":"tW-wA9Hdhi5Y","executionInfo":{"status":"aborted","timestamp":1660819174019,"user_tz":-120,"elapsed":19,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"R1pteZsuPXcT","executionInfo":{"status":"aborted","timestamp":1660819174019,"user_tz":-120,"elapsed":19,"user":{"displayName":"Hanna Gancarz","userId":"00656635668051500689"}}},"execution_count":null,"outputs":[]}]}